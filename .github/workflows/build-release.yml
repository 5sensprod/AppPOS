name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install root dependencies
        run: npm install

      - name: Install AppServe dependencies
        run: npm install
        working-directory: ./AppServe

      - name: Fix AppTools package.json
        run: |
          cd AppTools

          # Lire le package.json
          $packageJson = Get-Content -Path "package.json" -Raw | ConvertFrom-Json

          # S'assurer qu'electron et electron-builder sont dans devDependencies, pas dans dependencies
          if ($packageJson.dependencies.electron) {
            # Déplacer electron vers devDependencies
            $electronVersion = $packageJson.dependencies.electron
            $packageJson.dependencies.PSObject.Properties.Remove("electron")
            $packageJson.devDependencies.electron = "29.0.0"
          }

          if ($packageJson.dependencies.'electron-builder') {
            # Déplacer electron-builder vers devDependencies
            $builderVersion = $packageJson.dependencies.'electron-builder'
            $packageJson.dependencies.PSObject.Properties.Remove("electron-builder")
            $packageJson.devDependencies.'electron-builder' = "24.6.4"
          }

          # Ajouter axios aux dependencies s'il n'existe pas
          if (-not $packageJson.dependencies.axios) {
            $packageJson.dependencies | Add-Member -Name "axios" -Value "^1.6.7" -MemberType NoteProperty
          }

          # Écrire le package.json mis à jour
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content -Path "package.json"

          # Afficher le package.json modifié
          Write-Host "Package.json modifié:"
          Get-Content -Path "package.json"

      - name: Install AppTools dependencies
        run: |
          cd AppTools
          npm install
          npm install --save axios
          npm install --save-dev electron@29.0.0 electron-builder@24.6.4

      - name: Run prepare-production script
        run: node ./scripts/prepare-production.js

      - name: Build frontend
        run: |
          cd AppTools
          npx vite build

      - name: Build and publish Electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        run: |
          cd AppTools
          npx electron-builder --win --x64 --publish always

      - name: List release directory
        if: always()
        run: |
          Write-Host "Contenu du répertoire release:"
          if (Test-Path -Path "./release") {
            Get-ChildItem -Path "./release" -Recurse
          } else {
            Write-Host "Le répertoire release n'existe pas"
          }
