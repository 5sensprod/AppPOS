// src/hooks/useExportOptions.js
// ðŸ”§ VERSION CORRIGÃ‰E avec export par dÃ©faut

import { useState, useCallback } from 'react';

/**
 * Hook personnalisÃ© pour gÃ©rer les options d'export PDF
 * @returns {Object} Ã‰tat et fonctions de gestion des options
 */
export const useExportOptions = () => {
  // Ã‰tat initial des options d'export
  const [exportOptions, setExportOptions] = useState({
    reportType: 'summary',
    includeCompanyInfo: true,
    includeCharts: true,
    sortBy: 'name',
    sortOrder: 'asc',
    groupByCategory: false,
    selectedCategories: [],
    includeUncategorized: false,
    isSimplified: false, // ðŸ”¥ NOUVELLE OPTION
  });

  // Ã‰tat pour la hauteur du sÃ©lecteur de catÃ©gories
  const [categorySelectorHeight, setCategorySelectorHeight] = useState(300);
  const [isResizing, setIsResizing] = useState(false);

  /**
   * Met Ã  jour une option spÃ©cifique
   */
  const updateOption = useCallback((key, value) => {
    setExportOptions((prev) => ({
      ...prev,
      [key]: value,
    }));
  }, []);

  /**
   * Met Ã  jour plusieurs options en une fois
   */
  const updateOptions = useCallback((updates) => {
    setExportOptions((prev) => ({
      ...prev,
      ...updates,
    }));
  }, []);

  /**
   * Bascule une option boolÃ©enne
   */
  const toggleOption = useCallback((key) => {
    setExportOptions((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  }, []);

  /**
   * Met Ã  jour le type de rapport et ajuste les options en consÃ©quence
   */
  const setReportType = useCallback((reportType) => {
    setExportOptions((prev) => {
      const newOptions = { ...prev, reportType };

      // Si on passe Ã  "summary", dÃ©sactiver le groupement par catÃ©gories
      if (reportType === 'summary') {
        newOptions.groupByCategory = false;
        newOptions.selectedCategories = [];
        newOptions.isSimplified = false; // ðŸ”¥ RÃ©initialiser aussi le mode simplifiÃ©
      }

      return newOptions;
    });
  }, []);

  /**
   * Active/dÃ©sactive le groupement par catÃ©gories
   */
  const setGroupByCategory = useCallback((enabled) => {
    setExportOptions((prev) => ({
      ...prev,
      groupByCategory: enabled,
      selectedCategories: enabled ? prev.selectedCategories : [],
      // ðŸ”¥ Si on dÃ©sactive le groupement, dÃ©sactiver aussi le mode simplifiÃ©
      isSimplified: enabled ? prev.isSimplified : false,
    }));
  }, []);

  /**
   * ðŸ”¥ NOUVELLE MÃ‰THODE : Active/dÃ©sactive le mode simplifiÃ©
   */
  const setSimplified = useCallback((enabled) => {
    setExportOptions((prev) => ({
      ...prev,
      isSimplified: enabled,
    }));
  }, []);

  /**
   * Met Ã  jour la liste des catÃ©gories sÃ©lectionnÃ©es
   */
  const setSelectedCategories = useCallback((categories) => {
    setExportOptions((prev) => ({
      ...prev,
      selectedCategories: categories,
    }));
  }, []);

  /**
   * SÃ©lectionne toutes les catÃ©gories fournies
   */
  const selectAllCategories = useCallback((allCategoryIds) => {
    setExportOptions((prev) => ({
      ...prev,
      selectedCategories: allCategoryIds,
    }));
  }, []);

  /**
   * DÃ©sÃ©lectionne toutes les catÃ©gories
   */
  const deselectAllCategories = useCallback(() => {
    setExportOptions((prev) => ({
      ...prev,
      selectedCategories: [],
    }));
  }, []);

  /**
   * GÃ¨re la sÃ©lection d'une catÃ©gorie avec ses descendants
   */
  const handleCategorySelection = useCallback((categoryId, isSelected, categoryAndDescendants) => {
    setExportOptions((prev) => ({
      ...prev,
      selectedCategories: isSelected
        ? [
            ...prev.selectedCategories,
            ...categoryAndDescendants.filter((id) => !prev.selectedCategories.includes(id)),
          ]
        : prev.selectedCategories.filter((id) => !categoryAndDescendants.includes(id)),
    }));
  }, []);

  /**
   * Gestion du redimensionnement du sÃ©lecteur de catÃ©gories
   */
  const handleResizeStart = useCallback(
    (e) => {
      e.preventDefault();
      setIsResizing(true);

      const startY = e.clientY;
      const startHeight = categorySelectorHeight;

      const handleMouseMove = (e) => {
        const deltaY = e.clientY - startY;
        const newHeight = Math.max(200, Math.min(500, startHeight + deltaY));
        setCategorySelectorHeight(newHeight);
      };

      const handleMouseUp = () => {
        setIsResizing(false);
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
        document.body.style.userSelect = '';
        document.body.style.cursor = '';
      };

      document.body.style.userSelect = 'none';
      document.body.style.cursor = 'ns-resize';

      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    },
    [categorySelectorHeight]
  );

  /**
   * Remet les options Ã  leur Ã©tat initial
   */
  const resetOptions = useCallback(() => {
    setExportOptions({
      reportType: 'summary',
      includeCompanyInfo: true,
      includeCharts: true,
      sortBy: 'name',
      sortOrder: 'asc',
      groupByCategory: false,
      selectedCategories: [],
      includeUncategorized: false,
      isSimplified: false, // ðŸ”¥ Inclure dans la rÃ©initialisation
    });
    setCategorySelectorHeight(300);
  }, []);

  /**
   * PrÃ©pare les options pour l'API
   */
  const prepareApiOptions = useCallback(
    (companyInfo) => {
      return {
        companyInfo,
        reportType: exportOptions.reportType,
        includeCompanyInfo: exportOptions.includeCompanyInfo,
        includeCharts: exportOptions.includeCharts,
        sortBy: exportOptions.sortBy,
        sortOrder: exportOptions.sortOrder,
        groupByCategory: exportOptions.groupByCategory,
        selectedCategories: exportOptions.selectedCategories,
        includeUncategorized: exportOptions.includeUncategorized,
        isSimplified: exportOptions.isSimplified, // ðŸ”¥ NOUVELLE OPTION POUR L'API
      };
    },
    [exportOptions]
  );

  return {
    // Ã‰tat
    exportOptions,
    categorySelectorHeight,
    isResizing,

    // Actions gÃ©nÃ©rales
    updateOption,
    updateOptions,
    toggleOption,
    resetOptions,
    setExportOptions, // ðŸ”¥ AJOUT MANQUANT : Exposer setExportOptions directement

    // Actions spÃ©cifiques
    setReportType,
    setGroupByCategory,
    setSimplified, // ðŸ”¥ NOUVELLE ACTION
    setSelectedCategories,
    selectAllCategories,
    deselectAllCategories,
    handleCategorySelection,

    // Redimensionnement
    setCategorySelectorHeight,
    handleResizeStart,

    // Utilitaires
    prepareApiOptions,
  };
};

// ðŸ”¥ EXPORT PAR DÃ‰FAUT AUSSI (pour compatibilitÃ©)
export default useExportOptions;
