// services/fabricExportService.js - VERSION OPTIMIS√âE
import A4LabelRenderer from '../components/common/EntityTable/components/BatchActions/components/ExportLabels/services/A4LabelRenderer.js';
import RollLabelRenderer from '../components/common/EntityTable/components/BatchActions/components/ExportLabels/services/RollLabelRenderer.js';

class FabricExportService {
  // üéØ S√©lecteur de renderer unifi√©
  #getRenderer(supportType) {
    switch (supportType) {
      case 'rouleau':
        return RollLabelRenderer;
      case 'A4':
      case 'custom':
      default:
        return A4LabelRenderer;
    }
  }

  // üöÄ Export PDF simplifi√©
  async exportLabelsToPDF(exportConfig) {
    try {
      this.#validateExportConfig(exportConfig);

      const supportType = exportConfig.labelLayout?.layout?.supportType || 'A4';
      const renderer = this.#getRenderer(supportType);

      console.log(`üìÑ Export PDF ${supportType} avec ${exportConfig.labelData.length} √©tiquettes`);

      return await renderer.exportLabelsToPDF(exportConfig);
    } catch (error) {
      console.error('‚ùå Erreur export PDF:', error);
      throw error;
    }
  }

  // üé® Aper√ßu canvas simplifi√©
  async renderLabelPreview(canvasElement, label, layout, style, options = {}) {
    try {
      const supportType = layout?.supportType || 'A4';
      const renderer = this.#getRenderer(supportType);

      return await renderer.renderToCanvas(canvasElement, label, layout, style, options);
    } catch (error) {
      console.error('‚ùå Erreur aper√ßu canvas:', error);
      throw error;
    }
  }

  // üîç Validation all√©g√©e et tol√©rante
  #validateExportConfig(config) {
    if (!config?.labelData?.length) {
      throw new Error("Aucune donn√©e d'√©tiquette √† exporter");
    }

    if (!config.labelLayout?.layout) {
      throw new Error('Configuration de layout manquante');
    }

    if (!config.title?.trim()) {
      throw new Error('Titre du document requis');
    }
  }

  // üÜï M√©thode utilitaire pour obtenir les infos du renderer
  getRendererInfo(supportType) {
    const renderer = this.#getRenderer(supportType);
    return {
      type: supportType,
      renderer: renderer.constructor.name,
      isRoll: supportType === 'rouleau',
    };
  }
}

export default new FabricExportService();
