// src/services/initServices.js
import apiService from './api';
import imageProxyService from './imageProxyService';
import websocketService from './websocketService';

// Importer les stores Zustand
import { useProductStore } from '../features/products/stores/productStore';
import { useCategoryStore } from '../features/categories/stores/categoryStore';
import { useBrandStore } from '../features/brands/stores/brandStore';
import { useSupplierStore } from '../features/suppliers/stores/supplierStore';

/**
 * Initialise tous les services n√©cessaires au d√©marrage de l'application
 * @returns {Promise<boolean>} - true si l'initialisation a r√©ussi, false sinon
 */
export async function initializeServices() {
  try {
    // Initialiser l'API et r√©cup√©rer les informations du serveur
    await apiService.init();

    // R√©cup√©rer les informations du serveur
    const { data } = await apiService.get('/api/server-info');
    if (!data?.url) {
      throw new Error("L'URL de l'API est introuvable");
    }

    // Initialiser le service d'images
    imageProxyService.initialize(data.url);

    // Initialiser WebSocket avec l'URL fournie ou g√©n√©r√©e
    const wsUrl = data.websocket ?? data.url.replace(/^http/, 'ws');
    websocketService.init(wsUrl);

    // Configuration des gestionnaires d'√©v√©nements WebSocket globaux
    setupGlobalWebSocketEventHandlers();

    // Pr√©-charger les donn√©es essentielles
    await preloadEssentialData();

    console.log('‚úÖ Services initialis√©s avec succ√®s');
    return true;
  } catch (error) {
    console.error("üö´ √âchec de l'initialisation des services:", error.message);
    return false;
  }
}

/**
 * Configure les gestionnaires d'√©v√©nements globaux pour WebSocket
 */
function setupGlobalWebSocketEventHandlers() {
  // Exemple de gestionnaire global pour les notifications syst√®me
  websocketService.on('system.notification', (data) => {
    console.log('üì¢ Notification syst√®me re√ßue:', data);
    // Vous pourriez appeler une fonction pour afficher une notification ici
  });

  // Gestionnaire pour les d√©connexions inattendues
  websocketService.on('disconnect', () => {
    console.warn('‚ö†Ô∏è WebSocket d√©connect√©');
    // Vous pourriez afficher un indicateur de connexion perdue
  });

  // Gestionnaire pour les reconnexions r√©ussies
  websocketService.on('connect', () => {
    console.log('‚úÖ WebSocket reconnect√©');
    // Vous pourriez rafra√Æchir certaines donn√©es ici
  });
}

/**
 * Pr√©charge les donn√©es essentielles pour l'application
 * @returns {Promise<void>}
 */
async function preloadEssentialData() {
  // On utilise Promise.allSettled pour √©viter que les erreurs ne se propagent
  const preloadResults = await Promise.allSettled([
    preloadEntityData('product'),
    preloadEntityData('category'),
    preloadEntityData('brand'),
    preloadEntityData('supplier'),
  ]);

  // V√©rifier les r√©sultats
  preloadResults.forEach((result, index) => {
    const entities = ['products', 'categories', 'brands', 'suppliers'];
    if (result.status === 'rejected') {
      console.warn(`‚ö†Ô∏è √âchec du pr√©chargement des ${entities[index]}:`, result.reason);
    } else {
      console.log(`‚úÖ ${entities[index]} pr√©charg√©s avec succ√®s`);
    }
  });
}

/**
 * Pr√©charge les donn√©es d'une entit√© sp√©cifique
 * @param {string} entityType - Type d'entit√© (product, category, brand, supplier)
 * @returns {Promise<void>}
 */
async function preloadEntityData(entityType) {
  try {
    let fetchFunction;
    switch (entityType) {
      case 'product':
        fetchFunction = useProductStore.getState().fetchItems;
        break;
      case 'category':
        fetchFunction = useCategoryStore.getState().fetchItems;
        break;
      case 'brand':
        fetchFunction = useBrandStore.getState().fetchItems;
        break;
      case 'supplier':
        fetchFunction = useSupplierStore.getState().fetchItems;
        break;
      default:
        console.warn(`Type d'entit√© inconnu pour le pr√©chargement: ${entityType}`);
        return;
    }

    await fetchFunction();
  } catch (error) {
    console.error(`‚ùå √âchec du pr√©chargement des donn√©es ${entityType}:`, error);
    throw error;
  }
}

/**
 * Nettoie tous les gestionnaires d'√©v√©nements WebSocket
 * √Ä appeler lors de la d√©connexion de l'application
 */
export function cleanupServices() {
  // Nettoyer les gestionnaires d'√©v√©nements globaux
  websocketService.off('system.notification');
  websocketService.off('disconnect');
  websocketService.off('connect');

  // D√©connecter le WebSocket proprement
  websocketService.disconnect();

  console.log('üßπ Services nettoy√©s avec succ√®s');
}

/**
 * V√©rifie si les services sont connect√©s et fonctionnels
 * Utile pour les diagnostics
 * @returns {Object} - √âtat des diff√©rents services
 */
export function checkServicesStatus() {
  return {
    api: {
      available: !!apiService.getBaseUrl(),
      baseUrl: apiService.getBaseUrl(),
    },
    websocket: {
      connected: websocketService.isConnected,
      reconnecting: websocketService.isReconnecting,
      reconnectAttempts: websocketService.reconnectAttempts,
    },
    imageProxy: {
      initialized: imageProxyService.isInitialized ?? false,
    },
    stores: {
      products: {
        loaded: useProductStore.getState().items.length > 0,
        count: useProductStore.getState().items.length,
      },
      categories: {
        loaded: useCategoryStore.getState().items.length > 0,
        count: useCategoryStore.getState().items.length,
      },
      brands: {
        loaded: useBrandStore.getState().items.length > 0,
        count: useBrandStore.getState().items.length,
      },
      suppliers: {
        loaded: useSupplierStore.getState().items.length > 0,
        count: useSupplierStore.getState().items.length,
      },
    },
  };
}
