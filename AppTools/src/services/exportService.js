// src/services/exportService.js - Version √©tendue avec support des √©tiquettes
import apiService from './api';

/**
 * Service pour g√©rer les exports de donn√©es
 */
class ExportService {
  /**
   * Exporte les produits selon la configuration fournie
   *
   * @param {Object} exportConfig - Configuration de l'export
   * @returns {Promise} - Promise qui r√©sout √† un Blob du fichier export√©
   */
  async exportProducts(exportConfig) {
    try {
      const { format = 'pdf', exportType = 'table' } = exportConfig;

      // ‚úÖ NOUVEAU : Gestion des √©tiquettes
      if (exportType === 'labels') {
        console.log("üè∑Ô∏è Export d'√©tiquettes demand√©");
        return this.exportLabels(exportConfig);
      }

      // Export classique (tableau)
      if (format === 'pdf') {
        return this.exportProductsToPDF(exportConfig);
      } else if (format === 'csv') {
        return this.exportProductsToCSV(exportConfig);
      } else {
        throw new Error(`Format d'export non support√©: ${format}`);
      }
    } catch (error) {
      console.error(`Erreur lors de l'export:`, error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU : Exporte les √©tiquettes des produits
   *
   * @param {Object} exportConfig - Configuration de l'export
   * @param {Array} exportConfig.selectedItems - IDs des produits s√©lectionn√©s
   * @param {Array} exportConfig.labelData - Donn√©es des √©tiquettes extraites
   * @param {Object} exportConfig.labelLayout - Configuration de mise en page
   * @param {String} exportConfig.orientation - 'portrait' ou 'landscape'
   * @param {String} exportConfig.title - Titre du document
   * @returns {Promise} - Promise qui r√©sout √† un Blob PDF
   */
  async exportLabels(exportConfig) {
    try {
      console.log('üè∑Ô∏è D√©but export √©tiquettes avec config:', exportConfig);

      // ‚úÖ V√âRIFICATION DES DONN√âES
      if (!exportConfig.labelData || exportConfig.labelData.length === 0) {
        throw new Error("Aucune donn√©e d'√©tiquette √† exporter");
      }

      // ‚úÖ OPTION 1 : Export c√¥t√© serveur (recommand√© pour la production)
      if (this.shouldUseServerSideExport()) {
        return this.exportLabelsServerSide(exportConfig);
      }

      // ‚úÖ OPTION 2 : Export c√¥t√© client (pour test et d√©veloppement)
      return this.exportLabelsClientSide(exportConfig);
    } catch (error) {
      console.error("Erreur lors de l'export d'√©tiquettes:", error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU : Export d'√©tiquettes c√¥t√© serveur
   */
  async exportLabelsServerSide(exportConfig) {
    try {
      // Configuration pour l'API
      const serverConfig = {
        selectedItems: exportConfig.selectedItems,
        labelLayout: exportConfig.labelLayout || this.getDefaultLabelLayout(),
        orientation: exportConfig.orientation || 'portrait',
        title: exportConfig.title || '√âtiquettes produits',
        exportType: 'labels',
      };

      console.log('üöÄ Envoi vers serveur:', serverConfig);

      // Appel API pour g√©n√©rer les √©tiquettes
      const response = await apiService.post('/api/products/export/labels', serverConfig, {
        responseType: 'blob',
      });

      const filename = `${exportConfig.title || 'Etiquettes'}_${new Date().toISOString().split('T')[0]}.pdf`;
      this.downloadBlob(response.data, filename, 'application/pdf');

      return response.data;
    } catch (error) {
      console.error('Erreur export √©tiquettes serveur:', error);
      // Fallback vers export client
      console.log('üì± Fallback vers export client...');
      return this.exportLabelsClientSide(exportConfig);
    }
  }

  /**
   * ‚úÖ NOUVEAU : Export d'√©tiquettes c√¥t√© client (avec jsPDF)
   */
  async exportLabelsClientSide(exportConfig) {
    try {
      console.log('üì± Export c√¥t√© client avec jsPDF');

      // Import dynamique des d√©pendances
      const { jsPDF } = await import('jspdf');
      const JsBarcode = (await import('jsbarcode')).default;

      // Configuration
      const layout = exportConfig.labelLayout?.layout || this.getDefaultLabelLayout();
      const style = exportConfig.labelLayout?.style || this.getDefaultLabelStyle();
      const labelData = exportConfig.labelData;

      console.log('üé® Layout:', layout);
      console.log('üé® Style:', style);
      console.log('üìã Donn√©es:', labelData.length, '√©tiquettes');

      // ‚úÖ CALCUL DES DIMENSIONS ET POSITIONS
      // Calculer combien d'√©tiquettes par page en fonction de la taille A4
      const pageWidth = 210; // A4 en mm
      const pageHeight = 297; // A4 en mm

      // Calculer combien d'√©tiquettes peuvent tenir
      const maxColumns = Math.floor(
        (pageWidth - (layout.offsetLeft || 0) * 2) / (layout.width + (layout.spacingH || 0))
      );
      const maxRows = Math.floor(
        (pageHeight - (layout.offsetTop || 0) * 2) / (layout.height + (layout.spacingV || 0))
      );

      const columns = Math.max(1, maxColumns);
      const rows = Math.max(1, maxRows);
      const labelsPerPage = columns * rows;

      console.log(`üìê Calcul√©: ${columns}√ó${rows} = ${labelsPerPage} √©tiquettes par page`);

      // Cr√©er le PDF
      const doc = new jsPDF({
        orientation: exportConfig.orientation === 'landscape' ? 'landscape' : 'portrait',
        unit: 'mm',
        format: 'a4',
      });

      let currentPage = 0;

      // G√©n√©rer les √©tiquettes
      for (let i = 0; i < labelData.length; i++) {
        const label = labelData[i];

        // Calculer position sur la page
        const positionOnPage = i % labelsPerPage;
        const col = positionOnPage % columns;
        const row = Math.floor(positionOnPage / columns);

        // Nouvelle page si n√©cessaire
        if (i > 0 && positionOnPage === 0) {
          doc.addPage();
          currentPage++;
        }

        // ‚úÖ CALCUL POSITION AVEC OFFSETS (nouveau format)
        const x =
          (layout.offsetLeft || layout.marginLeft || 0) +
          col * (layout.width + (layout.spacingH || 0));
        const y =
          (layout.offsetTop || layout.marginTop || 0) +
          row * (layout.height + (layout.spacingV || 0));

        console.log(`üè∑Ô∏è √âtiquette ${i + 1}: ${label.name} √† (${x}, ${y})`);

        // Dessiner l'√©tiquette
        await this.drawLabelOnPDF(
          doc,
          label,
          { x, y, width: layout.width, height: layout.height },
          style,
          JsBarcode
        );
      }

      // Sauvegarder le PDF
      const filename = `${exportConfig.title || 'Etiquettes'}_${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(filename);

      console.log('‚úÖ Export client termin√©:', filename);
      return { success: true, filename };
    } catch (error) {
      console.error('Erreur export client:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU : Dessine une √©tiquette sur le PDF
   */
  async drawLabelOnPDF(doc, labelData, position, style, JsBarcode) {
    const { x, y, width, height } = position;

    try {
      // ‚úÖ BORDURE
      if (style.showBorder) {
        doc.setDrawColor('#000000');
        doc.setLineWidth(0.1);
        doc.rect(x, y, width, height);
      }

      // ‚úÖ ZONES DE CONTENU
      const padding = style.padding || 2;
      const contentX = x + padding;
      const contentY = y + padding;
      const contentWidth = width - padding * 2;
      const contentHeight = height - padding * 2;

      let currentY = contentY;

      // ‚úÖ NOM DU PRODUIT (en haut)
      if (style.showName && labelData.name) {
        doc.setFontSize(style.nameSize || 10);
        doc.setFont('helvetica', 'bold');

        // Centrer le texte
        const textWidth = doc.getTextWidth(labelData.name);
        const textX = contentX + (contentWidth - textWidth) / 2;

        doc.text(labelData.name, textX, currentY + 4);
        currentY += 8;
      }

      // ‚úÖ PRIX (style pro√©minent)
      if (style.showPrice && labelData.price) {
        const priceText = `${labelData.price.toFixed(2)} ‚Ç¨`;
        doc.setFontSize(style.priceSize || 14);
        doc.setFont('helvetica', 'bold');

        const priceWidth = doc.getTextWidth(priceText);
        const priceX = contentX + (contentWidth - priceWidth) / 2;

        doc.text(priceText, priceX, currentY + 5);
        currentY += 10;
      }

      // ‚úÖ CODE-BARRES AM√âLIOR√â (si disponible)
      if (style.showBarcode && labelData.barcode && labelData.barcode.trim() !== '') {
        try {
          // Cr√©er un canvas temporaire pour le code-barres
          const canvas = document.createElement('canvas');
          canvas.width = 300; // ‚úÖ Plus large pour meilleure qualit√©
          canvas.height = 80; // ‚úÖ Plus haut pour les chiffres

          // ‚úÖ G√âN√âRATION CODE-BARRES AM√âLIOR√âE
          JsBarcode(canvas, labelData.barcode, {
            format: 'EAN13',
            width: 2, // ‚úÖ Largeur des barres
            height: 40, // ‚úÖ Hauteur des barres
            displayValue: true, // ‚úÖ AFFICHER les chiffres
            fontSize: 12, // ‚úÖ Taille des chiffres PLUS GRANDE
            textMargin: 4, // ‚úÖ Marge entre barres et texte
            fontOptions: 'bold', // ‚úÖ Chiffres en gras
            background: '#ffffff',
            lineColor: '#000000',
            margin: 5,
          });

          // Convertir en image et ajouter au PDF
          const imgData = canvas.toDataURL('image/png');
          const barcodeWidth = Math.min(contentWidth - 2, 40);
          const barcodeHeight = 18; // ‚úÖ Plus haut pour inclure les chiffres
          const barcodeX = contentX + (contentWidth - barcodeWidth) / 2;

          doc.addImage(imgData, 'PNG', barcodeX, currentY, barcodeWidth, barcodeHeight);
          currentY += barcodeHeight + 2;
        } catch (barcodeError) {
          console.warn('Erreur g√©n√©ration code-barres pour', labelData.barcode, barcodeError);

          // Fallback : afficher le code en texte
          doc.setFontSize(8);
          doc.setFont('helvetica', 'normal');
          const codeWidth = doc.getTextWidth(labelData.barcode);
          const codeX = contentX + (contentWidth - codeWidth) / 2;
          doc.text(labelData.barcode, codeX, currentY + 3);
        }
      }
    } catch (error) {
      console.error('Erreur dessin √©tiquette:', error);

      // Fallback : √©tiquette simple avec texte uniquement
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(labelData.name || 'Produit', x + 2, y + 8);
      if (labelData.price) {
        doc.text(`${labelData.price.toFixed(2)} ‚Ç¨`, x + 2, y + 16);
      }
    }
  }

  /**
   * ‚úÖ NOUVEAU : Configuration par d√©faut pour les √©tiquettes
   */
  getDefaultLabelLayout() {
    return {
      width: 48.5,
      height: 25,
      offsetTop: 22,
      offsetLeft: 8,
      spacingH: 0,
      spacingV: 0,
    };
  }

  getDefaultLabelStyle() {
    return {
      fontSize: 12,
      fontFamily: 'Arial',
      showBorder: true,
      borderWidth: 0.5,
      borderColor: '#000000',
      padding: 2,
      alignment: 'center',
      showBarcode: true,
      barcodeHeight: 15,
      showPrice: true,
      priceSize: 14,
      showName: true,
      nameSize: 10,
    };
  }

  /**
   * ‚úÖ NOUVEAU : D√©termine si on utilise l'export serveur
   */
  shouldUseServerSideExport() {
    // Pour l'instant, utiliser c√¥t√© client pour le d√©veloppement
    // En production, vous pourrez activer le serveur
    return false; // Changez en true quand l'API serveur sera pr√™te
  }

  /**
   * Exporte les produits au format PDF (m√©thode existante)
   */
  async exportProductsToPDF(exportConfig) {
    try {
      const streamlinedConfig = {
        selectedItems: exportConfig.selectedItems,
        selectedColumns: exportConfig.selectedColumns,
        orientation: exportConfig.orientation,
        title: exportConfig.title,
        customColumn: exportConfig.customColumn,
      };

      console.log("Demande d'export PDF avec configuration optimis√©e:", streamlinedConfig);

      const response = await apiService.post('/api/products/export/pdf', streamlinedConfig, {
        responseType: 'blob',
      });

      const filename = `${exportConfig.title || 'Export Produits'}_${new Date().toISOString().split('T')[0]}.pdf`;
      this.downloadBlob(response.data, filename, 'application/pdf');

      return response.data;
    } catch (error) {
      console.error("Erreur lors de l'export PDF:", error);
      throw error;
    }
  }

  /**
   * Exporte des produits au format CSV (m√©thode existante)
   */
  async exportProductsToCSV(exportConfig) {
    try {
      const streamlinedConfig = {
        selectedItems: exportConfig.selectedItems,
        selectedColumns: exportConfig.selectedColumns,
        title: exportConfig.title,
        customColumn: exportConfig.customColumn,
      };

      console.log("Demande d'export CSV avec configuration optimis√©e:", streamlinedConfig);

      const response = await apiService.post('/api/products/export/csv', streamlinedConfig, {
        responseType: 'blob',
      });

      const filename = `${exportConfig.title || 'Export Produits'}_${new Date().toISOString().split('T')[0]}.csv`;
      this.downloadBlob(response.data, filename, 'text/csv');

      return response.data;
    } catch (error) {
      console.error("Erreur lors de l'export CSV:", error);
      throw error;
    }
  }

  /**
   * T√©l√©charge un blob comme fichier (m√©thode existante)
   */
  downloadBlob(blob, filename, mimeType) {
    const url = window.URL.createObjectURL(new Blob([blob], { type: mimeType }));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    setTimeout(() => {
      window.URL.revokeObjectURL(url);
      document.body.removeChild(link);
    }, 100);
  }
}

export default new ExportService();
