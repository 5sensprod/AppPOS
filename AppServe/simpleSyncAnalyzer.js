// simpleSyncAnalyzer.js - Version simplifi√©e qui lit directement les fichiers DB
const fs = require('fs').promises;
const path = require('path');
const dotenv = require('dotenv');

dotenv.config();

const WooCommerceClient = require('./services/base/WooCommerceClient');

class SimpleSyncAnalyzer {
  constructor() {
    this.wooClient = new WooCommerceClient();
    // En mode d√©veloppement, les donn√©es sont dans ./data
    this.dataPath = path.join(process.cwd(), 'data');
    console.log(`üìÅ [ANALYZER] R√©pertoire de donn√©es: ${this.dataPath}`);
  }

  async readProductsFromFile() {
    try {
      const productsPath = path.join(this.dataPath, 'products.db');

      // V√©rifier que le fichier existe
      const fileExists = await fs
        .access(productsPath)
        .then(() => true)
        .catch(() => false);
      if (!fileExists) {
        throw new Error(`Fichier products.db non trouv√©: ${productsPath}`);
      }

      console.log(`üìñ [ANALYZER] Lecture du fichier: ${productsPath}`);

      const fileContent = await fs.readFile(productsPath, 'utf8');

      if (!fileContent.trim()) {
        console.warn('‚ö†Ô∏è [ANALYZER] Fichier products.db vide');
        return [];
      }

      const lines = fileContent.split('\n').filter((line) => line.trim());
      const products = [];
      let validLines = 0;
      let invalidLines = 0;

      for (const line of lines) {
        try {
          const product = JSON.parse(line);
          products.push(product);
          validLines++;
        } catch (error) {
          invalidLines++;
          if (invalidLines <= 3) {
            // Afficher seulement les 3 premi√®res erreurs
            console.warn(`‚ö†Ô∏è Ligne JSON invalide: ${line.substring(0, 50)}...`);
          }
        }
      }

      console.log(`‚úÖ [ANALYZER] ${validLines} produits valides lus`);
      if (invalidLines > 0) {
        console.log(`‚ö†Ô∏è [ANALYZER] ${invalidLines} lignes ignor√©es (JSON invalide)`);
      }

      return products;
    } catch (error) {
      console.error('‚ùå [ANALYZER] Erreur lecture fichier produits:', error.message);
      throw error;
    }
  }

  async getAllWooProducts() {
    const allProducts = [];
    let page = 1;
    const perPage = 100;
    let hasMore = true;

    console.log('üåê R√©cup√©ration des produits WooCommerce...');

    while (hasMore) {
      try {
        console.log(`   üìÑ Page ${page}...`);
        const response = await this.wooClient.get('products', {
          page: page,
          per_page: perPage,
          status: 'any',
        });

        const products = response.data;
        allProducts.push(...products);

        hasMore = products.length === perPage;
        page++;

        // D√©lai pour √©viter de surcharger l'API
        await new Promise((resolve) => setTimeout(resolve, 200));
      } catch (error) {
        console.error(`‚ùå Erreur page ${page}:`, error.message);
        hasMore = false;
      }
    }

    return allProducts;
  }

  async analyze() {
    try {
      console.log('üîç ANALYSE SIMPLIFI√âE DES DIFF√âRENCES DE SYNCHRONISATION');
      console.log('‚ïê'.repeat(80));

      // 1. Lire les produits locaux depuis le fichier
      console.log('\nüì¶ √âTAPE 1: Lecture des produits locaux...');
      const localProducts = await this.readProductsFromFile();
      console.log(`‚úÖ ${localProducts.length} produits trouv√©s en local`);

      // 2. Filtrer les produits avec woo_id
      console.log('\nüîó √âTAPE 2: Analyse des produits synchronis√©s...');
      const syncedProducts = localProducts.filter((p) => p.woo_id);
      const unsyncedProducts = localProducts.filter((p) => !p.woo_id);

      console.log(`‚úÖ ${syncedProducts.length} produits avec woo_id (synchronis√©s)`);
      console.log(`‚ùå ${unsyncedProducts.length} produits sans woo_id (non synchronis√©s)`);

      // 3. R√©cup√©rer les produits WooCommerce
      console.log('\nüåê √âTAPE 3: R√©cup√©ration des produits WooCommerce...');
      const wooProducts = await this.getAllWooProducts();
      console.log(`‚úÖ ${wooProducts.length} produits trouv√©s sur WooCommerce`);

      // 4. Analyser les diff√©rences
      console.log('\nüîç √âTAPE 4: Analyse des diff√©rences...');
      const localWooIds = new Set(syncedProducts.map((p) => p.woo_id.toString()));
      const wooIds = new Set(wooProducts.map((p) => p.id.toString()));

      // Produits locaux manquants sur WooCommerce
      const missingOnWoo = syncedProducts.filter((p) => !wooIds.has(p.woo_id.toString()));

      // Produits WooCommerce non r√©f√©renc√©s en local
      const missingInLocal = wooProducts.filter((p) => !localWooIds.has(p.id.toString()));

      // Produits correctement synchronis√©s
      const correctlySynced = syncedProducts.filter((p) => wooIds.has(p.woo_id.toString()));

      console.log(
        `üîç Produits locaux avec woo_id mais manquants sur WooCommerce: ${missingOnWoo.length}`
      );
      console.log(`üîç Produits WooCommerce non r√©f√©renc√©s en local: ${missingInLocal.length}`);
      console.log(`‚úÖ Produits correctement synchronis√©s: ${correctlySynced.length}`);

      // 5. Afficher le rapport
      this.displaySimpleReport({
        totalLocal: localProducts.length,
        totalSynced: syncedProducts.length,
        totalUnsyncedLocal: unsyncedProducts.length,
        totalWoo: wooProducts.length,
        correctlySynced: correctlySynced.length,
        missingOnWoo,
        missingInLocal,
      });

      return {
        localProducts,
        syncedProducts,
        unsyncedProducts,
        wooProducts,
        correctlySynced,
        missingOnWoo,
        missingInLocal,
      };
    } catch (error) {
      console.error('‚ùå Erreur analyse:', error.message);
      throw error;
    }
  }

  displaySimpleReport(data) {
    console.log('\n‚ïê'.repeat(80));
    console.log('üìä RAPPORT D√âTAILL√â - DIFF√âRENCES DE SYNCHRONISATION');
    console.log('‚ïê'.repeat(80));

    console.log('\nüìà R√âSUM√â COMPLET:');
    console.log(`   üì¶ Total produits en local: ${data.totalLocal}`);
    console.log(`   üîó Produits avec woo_id (marqu√©s synchronis√©s): ${data.totalSynced}`);
    console.log(`   ‚ùå Produits sans woo_id (jamais synchronis√©s): ${data.totalUnsyncedLocal}`);
    console.log(`   üåê Total produits sur WooCommerce: ${data.totalWoo}`);
    console.log(`   ‚úÖ Produits r√©ellement synchronis√©s: ${data.correctlySynced}`);

    console.log('\nüö® ANALYSE DES PROBL√àMES:');
    console.log(
      `   üî¥ Produits locaux "perdus" (ont un woo_id mais absents de WooCommerce): ${data.missingOnWoo.length}`
    );
    console.log(
      `   üîµ Produits WooCommerce "orphelins" (non r√©f√©renc√©s en local): ${data.missingInLocal.length}`
    );

    console.log(`\nüéØ EXPLICATION DE LA DIFF√âRENCE:`);
    console.log(`   Vous pensiez avoir ${data.totalSynced} produits synchronis√©s`);
    console.log(`   Mais en r√©alit√©, vous n'en avez que ${data.correctlySynced} sur WooCommerce`);
    console.log(`   Diff√©rence: ${data.missingOnWoo.length} produits "perdus"`);

    // Calcul des pourcentages
    const syncRate = ((data.correctlySynced / data.totalSynced) * 100).toFixed(1);
    const lossRate = ((data.missingOnWoo.length / data.totalSynced) * 100).toFixed(1);

    console.log(`\nüìä STATISTIQUES:`);
    console.log(`   üéØ Taux de synchronisation r√©el: ${syncRate}%`);
    console.log(`   ‚ö†Ô∏è Taux de perte: ${lossRate}%`);

    if (data.missingOnWoo.length > 0) {
      console.log('\nüî¥ PRODUITS LOCAUX "PERDUS" (ont un woo_id mais absents de WooCommerce):');
      console.log('‚îÄ'.repeat(80));
      data.missingOnWoo.slice(0, 15).forEach((product, i) => {
        console.log(
          `${(i + 1).toString().padStart(2)}. ${(product.name || 'Sans nom').substring(0, 40)}`
        );
        console.log(`    ID Local: ${product._id}`);
        console.log(`    WooID suppos√©: ${product.woo_id}`);
        console.log(`    SKU: ${product.sku || 'N/A'}`);
        console.log(`    Statut: ${product.status || 'N/A'}`);
        console.log(`    Derni√®re sync: ${product.last_sync || 'Jamais'}`);
        console.log('');
      });

      if (data.missingOnWoo.length > 15) {
        console.log(`    ... et ${data.missingOnWoo.length - 15} autres produits perdus\n`);
      }
    }

    if (data.missingInLocal.length > 0) {
      console.log('\nüîµ PRODUITS WOOCOMMERCE "ORPHELINS" (non r√©f√©renc√©s en local):');
      console.log('‚îÄ'.repeat(80));
      data.missingInLocal.slice(0, 10).forEach((product, i) => {
        console.log(`${(i + 1).toString().padStart(2)}. ${product.name.substring(0, 40)}`);
        console.log(`    WooID: ${product.id}`);
        console.log(`    SKU: ${product.sku || 'N/A'}`);
        console.log(`    Statut: ${product.status}`);
        console.log(`    Cr√©√© le: ${product.date_created}`);
        console.log('');
      });

      if (data.missingInLocal.length > 10) {
        console.log(`    ... et ${data.missingInLocal.length - 10} autres produits orphelins\n`);
      }
    }

    console.log("\nüí° PLAN D'ACTION RECOMMAND√â:");
    console.log('‚îÄ'.repeat(80));
    if (data.missingOnWoo.length > 0) {
      console.log(`üîß PRIORIT√â 1: Resynchroniser ${data.missingOnWoo.length} produits "perdus"`);
      console.log('   ‚Üí Ces produits ont un woo_id mais ont √©t√© supprim√©s de WooCommerce');
      console.log('   ‚Üí Le script de correction va les recr√©er automatiquement');
    }
    if (data.missingInLocal.length > 0) {
      console.log(
        `üîÑ PRIORIT√â 2: Traiter ${data.missingInLocal.length} produits orphelins WooCommerce`
      );
      console.log('   ‚Üí Supprimer de WooCommerce OU importer en local');
    }
    if (data.totalUnsyncedLocal > 0) {
      console.log(
        `üì§ PRIORIT√â 3: Synchroniser ${data.totalUnsyncedLocal} produits jamais synchronis√©s`
      );
    }

    console.log('\n‚ïê'.repeat(80));
  }

  // G√©n√©rer la liste des IDs √† resynchroniser
  generateResyncScript(missingProducts) {
    if (missingProducts.length === 0) return '';

    const script = [
      '// Script de resynchronisation des produits manquants',
      '// √Ä ex√©cuter dans votre application',
      '',
      'const productIds = [',
      ...missingProducts.map(
        (p) => `  "${p._id}", // ${p.name || 'Sans nom'} (woo_id: ${p.woo_id})`
      ),
      '];',
      '',
      'async function resyncMissingProducts() {',
      '  const ProductWooCommerceService = require("./services/ProductWooCommerceService");',
      '  const Product = require("./models/Product");',
      '',
      '  for (const productId of productIds) {',
      '    try {',
      '      const product = await Product.findById(productId);',
      '      if (product) {',
      '        await ProductWooCommerceService.syncToWooCommerce([product]);',
      '        console.log(`‚úÖ ${productId} resynchronis√©`);',
      '      }',
      '    } catch (error) {',
      '      console.error(`‚ùå Erreur ${productId}:`, error.message);',
      '    }',
      '  }',
      '}',
      '',
      'resyncMissingProducts();',
    ];

    return script.join('\n');
  }
}

// Fonction principale
async function runSimpleAnalysis() {
  try {
    const analyzer = new SimpleSyncAnalyzer();
    const results = await analyzer.analyze();

    // G√©n√©rer le script de correction si n√©cessaire
    if (results.missingOnWoo.length > 0) {
      const resyncScript = analyzer.generateResyncScript(results.missingOnWoo);

      // Sauvegarder le script
      await fs.writeFile('./resync_missing_products.js', resyncScript);
      console.log('üìù Script de resynchronisation sauvegard√©: ./resync_missing_products.js\n');
    }

    console.log('‚úÖ Analyse termin√©e avec succ√®s!');
    return results;
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  runSimpleAnalysis()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { SimpleSyncAnalyzer, runSimpleAnalysis };
