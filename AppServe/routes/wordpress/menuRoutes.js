// AppServe/routes/wordpress/menuRoutes.js
const express = require('express');
const WordPressMenuService = require('../../services/wordpress/WordPressMenuService');

const router = express.Router();
const menuService = new WordPressMenuService();

// GET /api/wordpress/menu - R√©cup√©rer tous les menus
router.get('/', async (req, res) => {
  try {
    console.log('üìã [MENU-API] R√©cup√©ration de tous les menus WordPress...');

    const menus = await menuService.getMenus();

    console.log('‚úÖ [MENU-API] Menus r√©cup√©r√©s avec succ√®s:', menus.length);

    res.json({
      success: true,
      data: menus,
      count: menus.length,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('‚ùå [MENU-API] Erreur r√©cup√©ration menus:', error.message);

    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

// GET /api/wordpress/menu/main - R√©cup√©rer le menu principal avec ses √©l√©ments
router.get('/main', async (req, res) => {
  try {
    console.log('üìã [MENU-API] R√©cup√©ration du menu principal WordPress...');

    const menuData = await menuService.getMainMenuWithItems();

    console.log('‚úÖ [MENU-API] Menu principal r√©cup√©r√©:', {
      menuName: menuData.menu?.name,
      itemsCount: menuData.items?.length,
    });

    res.json({
      success: true,
      data: menuData,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('‚ùå [MENU-API] Erreur r√©cup√©ration menu principal:', error.message);

    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

// GET /api/wordpress/menu/:slug - R√©cup√©rer un menu par slug
router.get('/:slug', async (req, res) => {
  try {
    const { slug } = req.params;
    console.log(`üìã [MENU-API] R√©cup√©ration du menu "${slug}"...`);

    const menu = await menuService.getMenuBySlug(slug);
    const items = await menuService.getMenuItems(menu.id);
    const organizedItems = menuService.organizeMenuItems(items);

    const menuData = {
      menu: menu,
      items: organizedItems,
    };

    console.log('‚úÖ [MENU-API] Menu r√©cup√©r√©:', {
      slug,
      menuName: menu.name,
      itemsCount: items.length,
    });

    res.json({
      success: true,
      data: menuData,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error(`‚ùå [MENU-API] Erreur r√©cup√©ration menu "${req.params.slug}":`, error.message);

    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

// GET /api/wordpress/menu/:menuId/items - R√©cup√©rer les √©l√©ments d'un menu sp√©cifique
router.get('/:menuId/items', async (req, res) => {
  try {
    const { menuId } = req.params;
    console.log(`üìã [MENU-API] R√©cup√©ration des √©l√©ments du menu ID: ${menuId}...`);

    const items = await menuService.getMenuItems(parseInt(menuId));
    const organizedItems = menuService.organizeMenuItems(items);

    console.log('‚úÖ [MENU-API] √âl√©ments du menu r√©cup√©r√©s:', items.length);

    res.json({
      success: true,
      data: {
        items: organizedItems,
        flatItems: items,
      },
      count: items.length,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error(
      `‚ùå [MENU-API] Erreur r√©cup√©ration √©l√©ments menu ${req.params.menuId}:`,
      error.message
    );

    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

// GET /api/wordpress/menu/test/connection - Tester la connexion WordPress
router.get('/test/connection', async (req, res) => {
  try {
    console.log('üîç [MENU-API] Test de connexion WordPress Menu...');

    const result = await menuService.testConnection();

    console.log('‚úÖ [MENU-API] Test de connexion r√©ussi');

    res.json({
      success: true,
      message: 'Connexion WordPress Menu OK',
      ...result,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error('‚ùå [MENU-API] Test de connexion √©chou√©:', error.message);

    res.status(500).json({
      success: false,
      error: error.message,
      message: 'Test de connexion WordPress Menu √©chou√©',
      timestamp: new Date().toISOString(),
    });
  }
});

module.exports = router;
