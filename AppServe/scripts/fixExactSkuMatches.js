// fixExactSkuMatches.js - Corrige uniquement les woo_id avec correspondances SKU exactes
const fs = require('fs').promises;
const path = require('path');
const dotenv = require('dotenv');

dotenv.config();

class ExactSkuMatcher {
  constructor() {
    this.dataPath = path.join(process.cwd(), 'data');
    console.log(`üîß [FIXER] R√©pertoire de donn√©es: ${this.dataPath}`);
  }

  async loadAnalysisReport(reportPath) {
    try {
      console.log(`üìÑ Chargement du rapport: ${reportPath}`);
      const reportContent = await fs.readFile(reportPath, 'utf8');
      const report = JSON.parse(reportContent);

      // Filtrer uniquement les correspondances SKU exactes
      const exactSkuMatches = report.details.obsoleteWooIds.filter(
        (item) => item.matchType === 'sku_exact'
      );

      console.log(`‚úÖ ${exactSkuMatches.length} correspondances SKU exactes trouv√©es`);
      console.log(
        `‚è≠Ô∏è  ${report.details.obsoleteWooIds.length - exactSkuMatches.length} correspondances par similarit√© ignor√©es`
      );

      return exactSkuMatches;
    } catch (error) {
      console.error('‚ùå Erreur lecture rapport:', error.message);
      throw error;
    }
  }

  async readProductsFromFile() {
    try {
      const productsPath = path.join(this.dataPath, 'products.db');

      const fileExists = await fs
        .access(productsPath)
        .then(() => true)
        .catch(() => false);
      if (!fileExists) {
        throw new Error(`Fichier products.db non trouv√©: ${productsPath}`);
      }

      console.log(`üìñ Lecture du fichier: ${productsPath}`);
      const fileContent = await fs.readFile(productsPath, 'utf8');

      if (!fileContent.trim()) {
        throw new Error('Fichier products.db vide');
      }

      const lines = fileContent.split('\n').filter((line) => line.trim());
      const products = [];

      for (const line of lines) {
        try {
          const product = JSON.parse(line);
          products.push(product);
        } catch (error) {
          // Ignorer les lignes JSON invalides
        }
      }

      console.log(`‚úÖ ${products.length} produits lus`);
      return products;
    } catch (error) {
      console.error('‚ùå Erreur lecture fichier produits:', error.message);
      throw error;
    }
  }

  async updateProductsFile(products) {
    try {
      const productsPath = path.join(this.dataPath, 'products.db');
      const backupPath = path.join(this.dataPath, `products.db.backup.${Date.now()}`);

      // Cr√©er une sauvegarde
      console.log(`üíæ Cr√©ation sauvegarde: ${backupPath}`);
      await fs.copyFile(productsPath, backupPath);

      // √âcrire le nouveau fichier
      const content = products.map((product) => JSON.stringify(product)).join('\n');
      await fs.writeFile(productsPath, content);

      console.log(`‚úÖ Fichier products.db mis √† jour`);
      console.log(`üìÅ Sauvegarde disponible: ${backupPath}`);

      return backupPath;
    } catch (error) {
      console.error('‚ùå Erreur √©criture fichier:', error.message);
      throw error;
    }
  }

  async fixExactSkuMatches(reportPath) {
    try {
      console.log('üîß CORRECTION DES WOO_ID - CORRESPONDANCES SKU EXACTES');
      console.log('‚ïê'.repeat(80));

      // 1. Charger le rapport d'analyse
      const exactMatches = await this.loadAnalysisReport(reportPath);

      if (exactMatches.length === 0) {
        console.log('‚ÑπÔ∏è  Aucune correspondance SKU exacte √† corriger');
        return { corrected: 0, errors: 0 };
      }

      // 2. Charger les produits locaux
      console.log('\nüì¶ Chargement des produits locaux...');
      const products = await this.readProductsFromFile();

      // 3. Cr√©er un index des produits par ID pour performance
      const productsById = new Map();
      products.forEach((product) => {
        productsById.set(product._id, product);
      });

      // 4. Appliquer les corrections
      console.log('\nüîÑ Application des corrections...');
      const corrections = [];
      const errors = [];

      for (const match of exactMatches) {
        const product = productsById.get(match.localId);

        if (!product) {
          errors.push({
            localId: match.localId,
            sku: match.sku,
            error: 'Produit non trouv√© dans le fichier local',
          });
          continue;
        }

        // V√©rifier que le woo_id actuel correspond bien √† l'ancien
        if (product.woo_id !== match.oldWooId) {
          errors.push({
            localId: match.localId,
            sku: match.sku,
            error: `woo_id actuel (${product.woo_id}) diff√©rent de l'ancien attendu (${match.oldWooId})`,
          });
          continue;
        }

        // Appliquer la correction
        const oldWooId = product.woo_id;
        product.woo_id = match.newWooId;
        product.last_sync = new Date().toISOString(); // Mettre √† jour la date de sync

        corrections.push({
          localId: match.localId,
          localName: match.localName,
          sku: match.sku,
          oldWooId: oldWooId,
          newWooId: match.newWooId,
          wooName: match.wooName,
        });

        console.log(`‚úÖ ${match.sku}: ${oldWooId} ‚Üí ${match.newWooId}`);
      }

      // 5. Afficher le r√©sum√©
      console.log('\nüìä R√âSUM√â DES CORRECTIONS:');
      console.log('‚îÄ'.repeat(80));
      console.log(`‚úÖ Corrections appliqu√©es: ${corrections.length}`);
      console.log(`‚ùå Erreurs rencontr√©es: ${errors.length}`);

      if (errors.length > 0) {
        console.log('\n‚ùå ERREURS D√âTECT√âES:');
        errors.forEach((error, index) => {
          console.log(`${index + 1}. ${error.sku} (${error.localId}): ${error.error}`);
        });
      }

      // 6. Sauvegarder les modifications
      if (corrections.length > 0) {
        console.log('\nüíæ Sauvegarde des modifications...');
        const backupPath = await this.updateProductsFile(products);

        // Sauvegarder un rapport de correction
        const correctionReport = {
          timestamp: new Date().toISOString(),
          sourceReport: reportPath,
          corrections: corrections,
          errors: errors,
          backupFile: backupPath,
        };

        const reportPath2 = `./reports/woo_id_corrections_${Date.now()}.json`;
        await fs.writeFile(reportPath2, JSON.stringify(correctionReport, null, 2));
        console.log(`üìÑ Rapport de correction sauvegard√©: ${reportPath2}`);
      }

      console.log('\n‚ïê'.repeat(80));
      console.log('üéâ CORRECTION TERMIN√âE AVEC SUCC√àS !');
      console.log(`üìä ${corrections.length} woo_id mis √† jour`);

      if (corrections.length > 0) {
        console.log('\nüí° PROCHAINES √âTAPES RECOMMAND√âES:');
        console.log("   1. V√©rifier que l'application fonctionne correctement");
        console.log('   2. Lancer une synchronisation pour confirmer les corrections');
        console.log('   3. Relancer le script de d√©tection pour v√©rifier les r√©sultats');
      }

      return {
        corrected: corrections.length,
        errors: errors.length,
        corrections: corrections,
        errorDetails: errors,
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la correction:', error.message);
      throw error;
    }
  }

  // Fonction utilitaire pour restaurer depuis une sauvegarde
  async restoreBackup(backupPath) {
    try {
      const productsPath = path.join(this.dataPath, 'products.db');
      await fs.copyFile(backupPath, productsPath);
      console.log(`‚úÖ Restauration depuis ${backupPath} termin√©e`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la restauration:', error.message);
      throw error;
    }
  }
}

// Fonction principale
async function runExactSkuFix(reportPath) {
  try {
    if (!reportPath) {
      console.error("‚ùå Veuillez sp√©cifier le chemin du rapport d'analyse");
      console.log('Usage: node fixExactSkuMatches.js <chemin_rapport>');
      console.log(
        'Exemple: node fixExactSkuMatches.js ./reports/woo_id_analysis_1758645138038.json'
      );
      process.exit(1);
    }

    // V√©rifier que le fichier rapport existe
    const reportExists = await fs
      .access(reportPath)
      .then(() => true)
      .catch(() => false);

    if (!reportExists) {
      console.error(`‚ùå Fichier rapport non trouv√©: ${reportPath}`);
      process.exit(1);
    }

    const fixer = new ExactSkuMatcher();
    const results = await fixer.fixExactSkuMatches(reportPath);

    console.log('\n‚úÖ Op√©ration termin√©e avec succ√®s!');
    console.log(`üìä R√©sultat: ${results.corrected} corrections, ${results.errors} erreurs`);

    return results;
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error.message);
    process.exit(1);
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  const reportPath = process.argv[2];
  runExactSkuFix(reportPath)
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { ExactSkuMatcher, runExactSkuFix };
