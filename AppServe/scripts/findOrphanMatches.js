// findOrphanMatches.js - Trouve les produits locaux correspondant aux orphelins WooCommerce par SKU
const fs = require('fs').promises;
const path = require('path');
const dotenv = require('dotenv');

dotenv.config();

const WooCommerceClient = require('../services/base/WooCommerceClient');

class OrphanMatcher {
  constructor() {
    this.wooClient = new WooCommerceClient();
    this.dataPath = path.join(process.cwd(), 'data');
    console.log(`üîç [MATCHER] R√©pertoire de donn√©es: ${this.dataPath}`);
  }

  async readProductsFromFile() {
    try {
      const productsPath = path.join(this.dataPath, 'products.db');

      const fileExists = await fs
        .access(productsPath)
        .then(() => true)
        .catch(() => false);
      if (!fileExists) {
        throw new Error(`Fichier products.db non trouv√©: ${productsPath}`);
      }

      console.log(`üìñ Lecture du fichier: ${productsPath}`);
      const fileContent = await fs.readFile(productsPath, 'utf8');

      if (!fileContent.trim()) {
        throw new Error('Fichier products.db vide');
      }

      const lines = fileContent.split('\n').filter((line) => line.trim());
      const products = [];

      for (const line of lines) {
        try {
          const product = JSON.parse(line);
          products.push(product);
        } catch (error) {
          // Ignorer les lignes JSON invalides
        }
      }

      console.log(`‚úÖ ${products.length} produits lus`);
      return products;
    } catch (error) {
      console.error('‚ùå Erreur lecture fichier produits:', error.message);
      throw error;
    }
  }

  async getAllWooProducts() {
    const allProducts = [];
    let page = 1;
    const perPage = 100;
    let hasMore = true;

    console.log('üåê R√©cup√©ration des produits WooCommerce...');

    while (hasMore) {
      try {
        console.log(`   üìÑ Page ${page}...`);
        const response = await this.wooClient.get('products', {
          page: page,
          per_page: perPage,
          status: 'any',
        });

        const products = response.data;
        allProducts.push(...products);

        hasMore = products.length === perPage;
        page++;

        await new Promise((resolve) => setTimeout(resolve, 200));
      } catch (error) {
        console.error(`‚ùå Erreur page ${page}:`, error.message);
        hasMore = false;
      }
    }

    return allProducts;
  }

  // Normalise les SKUs pour la comparaison
  normalizeSku(sku) {
    if (!sku) return '';
    return sku.toString().toLowerCase().trim().replace(/\s+/g, ' ');
  }

  async findOrphanMatches() {
    try {
      console.log('üîç RECHERCHE DES CORRESPONDANCES POUR ORPHELINS WOOCOMMERCE');
      console.log('‚ïê'.repeat(80));

      // 1. Charger les donn√©es
      console.log('\nüì¶ √âTAPE 1: Chargement des donn√©es...');
      const [localProducts, wooProducts] = await Promise.all([
        this.readProductsFromFile(),
        this.getAllWooProducts(),
      ]);

      // 2. Identifier les produits synchronis√©s et non synchronis√©s
      const syncedProducts = localProducts.filter((p) => p.woo_id);
      const unsyncedProducts = localProducts.filter((p) => !p.woo_id);

      console.log(`üîó Produits locaux synchronis√©s: ${syncedProducts.length}`);
      console.log(`‚ùå Produits locaux non synchronis√©s: ${unsyncedProducts.length}`);
      console.log(`üåê Total produits WooCommerce: ${wooProducts.length}`);

      // 3. Identifier les orphelins WooCommerce
      const localWooIds = new Set(syncedProducts.map((p) => p.woo_id.toString()));
      const orphanWooProducts = wooProducts.filter((woo) => !localWooIds.has(woo.id.toString()));

      console.log(`üîµ Orphelins WooCommerce identifi√©s: ${orphanWooProducts.length}`);

      // 4. Cr√©er des index pour la recherche par SKU
      const unsyncedBySku = new Map();
      unsyncedProducts.forEach((product) => {
        if (product.sku) {
          const normalizedSku = this.normalizeSku(product.sku);
          if (!unsyncedBySku.has(normalizedSku)) {
            unsyncedBySku.set(normalizedSku, []);
          }
          unsyncedBySku.get(normalizedSku).push(product);
        }
      });

      console.log(`üìã Produits locaux index√©s par SKU: ${unsyncedBySku.size} SKUs uniques`);

      // 5. Rechercher les correspondances
      console.log('\nüîç √âTAPE 2: Recherche des correspondances par SKU...');

      const results = {
        exactMatches: [], // Correspondance SKU exacte (1:1)
        multipleMatches: [], // Plusieurs produits locaux pour un SKU WooCommerce
        noMatches: [], // Aucune correspondance trouv√©e
        duplicateWooSkus: [], // SKUs dupliqu√©s c√¥t√© WooCommerce
      };

      // D√©tecter les SKUs dupliqu√©s c√¥t√© WooCommerce d'abord
      const wooSkuCounts = new Map();
      orphanWooProducts.forEach((woo) => {
        if (woo.sku) {
          const normalizedSku = this.normalizeSku(woo.sku);
          if (!wooSkuCounts.has(normalizedSku)) {
            wooSkuCounts.set(normalizedSku, []);
          }
          wooSkuCounts.get(normalizedSku).push(woo);
        }
      });

      wooSkuCounts.forEach((wooProducts, sku) => {
        if (wooProducts.length > 1) {
          results.duplicateWooSkus.push({
            sku: sku,
            wooProducts: wooProducts,
          });
        }
      });

      // Traiter chaque orphelin WooCommerce
      for (const wooProduct of orphanWooProducts) {
        if (!wooProduct.sku) {
          results.noMatches.push({
            wooProduct: wooProduct,
            reason: 'Pas de SKU c√¥t√© WooCommerce',
          });
          continue;
        }

        const normalizedWooSku = this.normalizeSku(wooProduct.sku);
        const matchingLocalProducts = unsyncedBySku.get(normalizedWooSku) || [];

        if (matchingLocalProducts.length === 0) {
          results.noMatches.push({
            wooProduct: wooProduct,
            reason: 'Aucun produit local trouv√© avec ce SKU',
          });
        } else if (matchingLocalProducts.length === 1) {
          results.exactMatches.push({
            wooProduct: wooProduct,
            localProduct: matchingLocalProducts[0],
            sku: normalizedWooSku,
          });
        } else {
          results.multipleMatches.push({
            wooProduct: wooProduct,
            localProducts: matchingLocalProducts,
            sku: normalizedWooSku,
          });
        }
      }

      // 6. Afficher les r√©sultats
      this.displayMatchingResults(results);

      return results;
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche:', error.message);
      throw error;
    }
  }

  displayMatchingResults(results) {
    console.log('\n‚ïê'.repeat(80));
    console.log('üìä R√âSULTATS DE LA RECHERCHE DE CORRESPONDANCES');
    console.log('‚ïê'.repeat(80));

    console.log('\nüìà R√âSUM√â:');
    console.log(`   ‚úÖ Correspondances exactes (1:1): ${results.exactMatches.length}`);
    console.log(`   ‚ö†Ô∏è  Correspondances multiples (1:N): ${results.multipleMatches.length}`);
    console.log(`   ‚ùå Aucune correspondance: ${results.noMatches.length}`);
    console.log(`   üîÑ SKUs dupliqu√©s sur WooCommerce: ${results.duplicateWooSkus.length}`);

    // Correspondances exactes - c'est ce qui nous int√©resse le plus !
    if (results.exactMatches.length > 0) {
      console.log('\n‚úÖ CORRESPONDANCES EXACTES (Pr√™tes √† resynchroniser):');
      console.log('‚îÄ'.repeat(80));

      results.exactMatches.forEach((match, index) => {
        const woo = match.wooProduct;
        const local = match.localProduct;

        console.log(`${(index + 1).toString().padStart(2)}. SKU: ${match.sku}`);
        console.log(`    üåê WooCommerce: ${woo.name} (ID: ${woo.id})`);
        console.log(`    üì¶ Local: ${local.name || 'Sans nom'} (ID: ${local._id})`);
        console.log(`    üìÖ WooCommerce cr√©√© le: ${woo.date_created}`);
        console.log(`    üí∞ Prix WooCommerce: ${woo.price || 'N/A'}`);
        console.log(`    üè∑Ô∏è  Statut WooCommerce: ${woo.status}`);

        // V√©rifier si le produit WooCommerce a des images
        const hasImages = woo.images && woo.images.length > 0;
        console.log(
          `    üñºÔ∏è  Images WooCommerce: ${hasImages ? `${woo.images.length} image(s)` : 'Aucune'}`
        );

        console.log('');
      });

      console.log(
        `üí° CES ${results.exactMatches.length} PRODUITS PEUVENT √äTRE RESYNCHRONIS√âS AUTOMATIQUEMENT`
      );
    }

    // Correspondances multiples
    if (results.multipleMatches.length > 0) {
      console.log('\n‚ö†Ô∏è  CORRESPONDANCES MULTIPLES (N√©cessitent une v√©rification manuelle):');
      console.log('‚îÄ'.repeat(80));

      results.multipleMatches.forEach((match, index) => {
        const woo = match.wooProduct;

        console.log(`${(index + 1).toString().padStart(2)}. SKU: ${match.sku}`);
        console.log(`    üåê WooCommerce: ${woo.name} (ID: ${woo.id})`);
        console.log(`    üì¶ Produits locaux trouv√©s (${match.localProducts.length}):`);

        match.localProducts.forEach((local, i) => {
          console.log(`       ${i + 1}. ${local.name || 'Sans nom'} (ID: ${local._id})`);
        });
        console.log('');
      });
    }

    // SKUs dupliqu√©s WooCommerce
    if (results.duplicateWooSkus.length > 0) {
      console.log('\nüîÑ SKUs DUPLIQU√âS SUR WOOCOMMERCE (√Ä nettoyer en priorit√©):');
      console.log('‚îÄ'.repeat(80));

      results.duplicateWooSkus.forEach((duplicate, index) => {
        console.log(`${(index + 1).toString().padStart(2)}. SKU: ${duplicate.sku}`);
        duplicate.wooProducts.forEach((woo, i) => {
          console.log(`       ${i + 1}. ${woo.name} (ID: ${woo.id}) - Cr√©√©: ${woo.date_created}`);
        });
        console.log('');
      });
    }

    // Pas de correspondances
    if (results.noMatches.length > 0) {
      console.log('\n‚ùå AUCUNE CORRESPONDANCE TROUV√âE:');
      console.log('‚îÄ'.repeat(80));

      results.noMatches.slice(0, 5).forEach((item, index) => {
        const woo = item.wooProduct;
        console.log(
          `${(index + 1).toString().padStart(2)}. ${woo.name} (SKU: ${woo.sku || 'N/A'})`
        );
        console.log(`    WooID: ${woo.id}`);
        console.log(`    Raison: ${item.reason}`);
        console.log('');
      });

      if (results.noMatches.length > 5) {
        console.log(`    ... et ${results.noMatches.length - 5} autres sans correspondance\n`);
      }
    }

    console.log('\nüí° PROCHAINES √âTAPES RECOMMAND√âES:');
    console.log('‚îÄ'.repeat(80));
    if (results.exactMatches.length > 0) {
      console.log(
        `üîß PRIORIT√â 1: Resynchroniser ${results.exactMatches.length} correspondances exactes`
      );
      console.log(
        '   ‚Üí Mettre √† jour les woo_id locaux et r√©cup√©rer les images/donn√©es WooCommerce'
      );
    }
    if (results.duplicateWooSkus.length > 0) {
      console.log(
        `üßπ PRIORIT√â 2: Nettoyer ${results.duplicateWooSkus.length} doublons SKU sur WooCommerce`
      );
    }
    if (results.multipleMatches.length > 0) {
      console.log(
        `üëÅÔ∏è  PRIORIT√â 3: Examiner manuellement ${results.multipleMatches.length} correspondances multiples`
      );
    }

    console.log('\n‚ïê'.repeat(80));
  }

  // G√©n√©rer la liste des IDs pour resynchronisation
  generateResyncList(results) {
    const resyncData = results.exactMatches.map((match) => ({
      localId: match.localProduct._id,
      localName: match.localProduct.name,
      localSku: match.localProduct.sku,
      wooId: match.wooProduct.id,
      wooName: match.wooProduct.name,
      wooImages: match.wooProduct.images || [],
    }));

    return resyncData;
  }
}

// Fonction principale
async function runOrphanMatching() {
  try {
    const matcher = new OrphanMatcher();
    const results = await matcher.findOrphanMatches();

    // Sauvegarder les r√©sultats
    const reportPath = `./reports/orphan_matching_${Date.now()}.json`;
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        exactMatches: results.exactMatches.length,
        multipleMatches: results.multipleMatches.length,
        noMatches: results.noMatches.length,
        duplicateWooSkus: results.duplicateWooSkus.length,
      },
      resyncList: matcher.generateResyncList(results),
      details: results,
    };

    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    console.log(`üìÑ Rapport d√©taill√© sauvegard√©: ${reportPath}`);

    console.log('\n‚úÖ Recherche de correspondances termin√©e avec succ√®s!');
    console.log(`üéØ ${results.exactMatches.length} produits pr√™ts √† √™tre resynchronis√©s`);

    return results;
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  runOrphanMatching()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { OrphanMatcher, runOrphanMatching };
