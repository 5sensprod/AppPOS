const fs = require('fs');
const path = require('path');

// Chemins des fichiers
const currentDbPath = path.join('data', 'products.db');
const correctionsFile = 'ean13_invalides_current.json';
const backupDbPath = path.join('data', 'products_backup_corrections_' + Date.now() + '.db');

// Fonction pour lire et parser une base de donn√©es NeDB
function readDatabase(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.trim().split('\n');
    return lines
      .map((line) => {
        try {
          return JSON.parse(line);
        } catch (e) {
          return null;
        }
      })
      .filter((item) => item !== null);
  } catch (error) {
    console.error(`Erreur lecture ${filePath}:`, error.message);
    return [];
  }
}

// Fonction pour sauvegarder une base de donn√©es NeDB
function saveDatabase(filePath, products) {
  const content = products.map((product) => JSON.stringify(product)).join('\n');
  fs.writeFileSync(filePath, content, 'utf8');
}

// Fonction pour charger les corrections
function loadCorrections(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`Erreur lecture des corrections ${filePath}:`, error.message);
    return [];
  }
}

// Fonction pour mettre √† jour le code-barres d'un produit
function updateBarcode(product, newBarcode) {
  if (!product.meta_data) {
    product.meta_data = [];
  }

  // Chercher l'item barcode existant
  const barcodeIndex = product.meta_data.findIndex((item) => item.key === 'barcode');

  if (barcodeIndex >= 0) {
    // Mettre √† jour l'existant
    product.meta_data[barcodeIndex].value = newBarcode;
  } else {
    // Ajouter un nouveau (normalement ne devrait pas arriver)
    product.meta_data.push({
      key: 'barcode',
      value: newBarcode,
    });
  }

  return product;
}

// Fonction principale d'application des corrections
function applyCorrections() {
  console.log('üîß Application des corrections EAN13...\n');

  // V√©rifier que le fichier de corrections existe
  if (!fs.existsSync(correctionsFile)) {
    console.error(`‚ùå Fichier de corrections introuvable: ${correctionsFile}`);
    console.log("üí° Ex√©cutez d'abord le script de validation pour g√©n√©rer ce fichier.");
    return;
  }

  // Charger les corrections
  console.log('üìñ Chargement des corrections...');
  const corrections = loadCorrections(correctionsFile);
  console.log(`   ‚Ä¢ ${corrections.length} corrections trouv√©es`);

  if (corrections.length === 0) {
    console.log('‚úÖ Aucune correction √† appliquer !');
    return;
  }

  // Filtrer les corrections applicables (qui ont une correction propos√©e)
  const applicableCorrections = corrections.filter(
    (item) => item.correction && item.correction.corrected
  );

  console.log(`   ‚Ä¢ ${applicableCorrections.length} corrections applicables`);

  if (applicableCorrections.length === 0) {
    console.log('‚ö†Ô∏è  Aucune correction automatique possible dans le fichier');
    return;
  }

  // Lire la base de donn√©es actuelle
  console.log('\nüìñ Chargement de la base de donn√©es...');
  const currentProducts = readDatabase(currentDbPath);
  console.log(`   ‚Ä¢ ${currentProducts.length} produits charg√©s`);

  if (currentProducts.length === 0) {
    console.error('‚ùå Impossible de charger la base de donn√©es');
    return;
  }

  // Cr√©er un index des produits par _id
  const productIndex = {};
  currentProducts.forEach((product, index) => {
    if (product._id) {
      productIndex[product._id] = index;
    }
  });

  // Cr√©er une sauvegarde
  console.log("\nüíæ Cr√©ation d'une sauvegarde...");
  try {
    fs.copyFileSync(currentDbPath, backupDbPath);
    console.log(`   ‚úÖ Sauvegarde cr√©√©e: ${backupDbPath}`);
  } catch (error) {
    console.error(`   ‚ùå Erreur sauvegarde: ${error.message}`);
    return;
  }

  // Appliquer les corrections
  console.log('\nüîß Application des corrections...');
  let successCount = 0;
  let errorCount = 0;
  const appliedCorrections = [];

  applicableCorrections.forEach((correction) => {
    const productIndex_val = productIndex[correction._id];

    if (productIndex_val === undefined) {
      console.error(`   ‚ùå Produit introuvable: ${correction._id}`);
      errorCount++;
      return;
    }

    const product = currentProducts[productIndex_val];

    try {
      // Appliquer la correction
      updateBarcode(product, correction.correction.corrected);

      appliedCorrections.push({
        _id: correction._id,
        name: correction.name || correction.sku,
        barcode_old: correction.barcode_original,
        barcode_new: correction.correction.corrected,
        reason: correction.correction.reason,
      });

      console.log(`   ‚úÖ ${correction.name || correction.sku || correction._id}`);
      console.log(`      ${correction.barcode_original} ‚Üí ${correction.correction.corrected}`);

      successCount++;
    } catch (error) {
      console.error(`   ‚ùå Erreur pour ${correction._id}: ${error.message}`);
      errorCount++;
    }
  });

  console.log(`\nüìä R√©sultats:`);
  console.log(`   ‚Ä¢ Corrections appliqu√©es: ${successCount}`);
  console.log(`   ‚Ä¢ Erreurs: ${errorCount}`);

  if (successCount === 0) {
    console.log('‚ö†Ô∏è  Aucune correction appliqu√©e, pas de sauvegarde n√©cessaire');
    return;
  }

  // Sauvegarder la base mise √† jour
  console.log('\nüíæ Sauvegarde de la base corrig√©e...');
  try {
    saveDatabase(currentDbPath, currentProducts);
    console.log(`   ‚úÖ Base de donn√©es mise √† jour`);
  } catch (error) {
    console.error(`   ‚ùå Erreur sauvegarde: ${error.message}`);
    console.log(`   üîÑ Tentative de restauration...`);
    try {
      fs.copyFileSync(backupDbPath, currentDbPath);
      console.log(`   ‚úÖ Base restaur√©e depuis la sauvegarde`);
    } catch (restoreError) {
      console.error(`   ‚ùå Erreur restauration: ${restoreError.message}`);
      console.error(`   ‚ö†Ô∏è  ATTENTION: Base potentiellement corrompue !`);
    }
    return;
  }

  // G√©n√©rer un rapport des corrections appliqu√©es
  const reportFile = 'rapport_corrections_ean13_' + Date.now() + '.json';
  const report = {
    timestamp: new Date().toISOString(),
    stats: {
      corrections_found: corrections.length,
      corrections_applicable: applicableCorrections.length,
      corrections_applied: successCount,
      corrections_failed: errorCount,
    },
    applied_corrections: appliedCorrections,
    backup_file: backupDbPath,
    source_file: correctionsFile,
  };

  try {
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2), 'utf8');
    console.log(`\nüìä Rapport d√©taill√© sauvegard√©: ${reportFile}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Impossible de sauvegarder le rapport: ${error.message}`);
  }

  console.log('\n‚úÖ Corrections EAN13 appliqu√©es avec succ√®s !');
  console.log(`üîß ${successCount} codes-barres corrig√©s`);
  console.log(`üíæ Sauvegarde disponible: ${backupDbPath}`);

  // Suggestion de v√©rification
  console.log(
    '\nüí° Suggestion: Ex√©cutez √† nouveau le script de validation pour v√©rifier les corrections'
  );
}

// Ex√©cuter le script
if (require.main === module) {
  applyCorrections();
}

module.exports = { applyCorrections, updateBarcode };
